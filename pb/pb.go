package pb

import (
    "reflect"
    "sync"

    "github.com/golang/protobuf/proto"
    "google.golang.org/protobuf/reflect/protoreflect"
    "google.golang.org/protobuf/runtime/protoimpl"
)

const (
    // Verify that this generated code is sufficiently up-to-date.
    _ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
    // Verify that runtime/protoimpl is sufficiently up-to-date.
    _ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TaskManager
type TaskContext struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    FeedID               string `protobuf:"bytes,1,opt,name=feedID,proto3" json:"feedID,omitempty"`
    Appid                string `protobuf:"bytes,2,opt,name=appid,proto3" json:"appid,omitempty"`
    SourceKey            string `protobuf:"bytes,3,opt,name=sourceKey,proto3" json:"sourceKey,omitempty"`
    TaskBeginTimeStampMS int64  `protobuf:"varint,4,opt,name=taskBeginTimeStampMS,proto3" json:"taskBeginTimeStampMS,omitempty"`
    RequestIP            string `protobuf:"bytes,5,opt,name=requestIP,proto3" json:"requestIP,omitempty"`
    RequestServerName    string `protobuf:"bytes,6,opt,name=requestServerName,proto3" json:"requestServerName,omitempty"`
    TimeoutMs            int64  `protobuf:"varint,7,opt,name=timeoutMs,proto3" json:"timeoutMs,omitempty"`
    RetryTime            int32  `protobuf:"varint,8,opt,name=retryTime,proto3" json:"retryTime,omitempty"`
    VideoDurationMs      int32  `protobuf:"varint,9,opt,name=videoDurationMs,proto3" json:"videoDurationMs,omitempty"`
    // Types that are assignable to VideoInfo:
    //	*TaskContext_TencentVideoVid
    //	*TaskContext_VideoUrl
    VideoInfo              isTaskContext_VideoInfo `protobuf_oneof:"video_info"`
    TencentVideoFormat     int32                   `protobuf:"varint,12,opt,name=tencentVideoFormat,proto3" json:"tencentVideoFormat,omitempty"`
    TencentVideoDisplayVid string                  `protobuf:"bytes,13,opt,name=tencentVideoDisplayVid,proto3" json:"tencentVideoDisplayVid,omitempty"`
    TencentVideoCid        string                  `protobuf:"bytes,14,opt,name=tencentVideoCid,proto3" json:"tencentVideoCid,omitempty"`
    InnerFeedID            string                  `protobuf:"bytes,15,opt,name=innerFeedID,proto3" json:"innerFeedID,omitempty"`
    StarIDs                []string                `protobuf:"bytes,16,rep,name=starIDs,proto3" json:"starIDs,omitempty"`
    VideoType              string                  `protobuf:"bytes,17,opt,name=video_type,json=videoType,proto3" json:"video_type,omitempty"`
    Interval               int32                   `protobuf:"varint,18,opt,name=interval,proto3" json:"interval,omitempty"`
    FormatForce            bool                    `protobuf:"varint,19,opt,name=formatForce,proto3" json:"formatForce,omitempty"`
    DecodeMode             string                  `protobuf:"bytes,20,opt,name=decodeMode,proto3" json:"decodeMode,omitempty"`
    DrawVideo              bool                    `protobuf:"varint,21,opt,name=drawVideo,proto3" json:"drawVideo,omitempty"`
    Atom                   string                  `protobuf:"bytes,22,opt,name=atom,proto3" json:"atom,omitempty"`
}

func (x *TaskContext) Reset() {
    *x = TaskContext{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[0]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *TaskContext) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*TaskContext) ProtoMessage() {}

func (x *TaskContext) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[0]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use TaskContext.ProtoReflect.Descriptor instead.
func (*TaskContext) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{0}
}

func (x *TaskContext) GetFeedID() string {
    if x != nil {
        return x.FeedID
    }
    return ""
}

func (x *TaskContext) GetAppid() string {
    if x != nil {
        return x.Appid
    }
    return ""
}

func (x *TaskContext) GetSourceKey() string {
    if x != nil {
        return x.SourceKey
    }
    return ""
}

func (x *TaskContext) GetTaskBeginTimeStampMS() int64 {
    if x != nil {
        return x.TaskBeginTimeStampMS
    }
    return 0
}

func (x *TaskContext) GetRequestIP() string {
    if x != nil {
        return x.RequestIP
    }
    return ""
}

func (x *TaskContext) GetRequestServerName() string {
    if x != nil {
        return x.RequestServerName
    }
    return ""
}

func (x *TaskContext) GetTimeoutMs() int64 {
    if x != nil {
        return x.TimeoutMs
    }
    return 0
}

func (x *TaskContext) GetRetryTime() int32 {
    if x != nil {
        return x.RetryTime
    }
    return 0
}

func (x *TaskContext) GetVideoDurationMs() int32 {
    if x != nil {
        return x.VideoDurationMs
    }
    return 0
}

func (m *TaskContext) GetVideoInfo() isTaskContext_VideoInfo {
    if m != nil {
        return m.VideoInfo
    }
    return nil
}

func (x *TaskContext) GetTencentVideoVid() string {
    if x, ok := x.GetVideoInfo().(*TaskContext_TencentVideoVid); ok {
        return x.TencentVideoVid
    }
    return ""
}

func (x *TaskContext) GetVideoUrl() string {
    if x, ok := x.GetVideoInfo().(*TaskContext_VideoUrl); ok {
        return x.VideoUrl
    }
    return ""
}

func (x *TaskContext) GetTencentVideoFormat() int32 {
    if x != nil {
        return x.TencentVideoFormat
    }
    return 0
}

func (x *TaskContext) GetTencentVideoDisplayVid() string {
    if x != nil {
        return x.TencentVideoDisplayVid
    }
    return ""
}

func (x *TaskContext) GetTencentVideoCid() string {
    if x != nil {
        return x.TencentVideoCid
    }
    return ""
}

func (x *TaskContext) GetInnerFeedID() string {
    if x != nil {
        return x.InnerFeedID
    }
    return ""
}

func (x *TaskContext) GetStarIDs() []string {
    if x != nil {
        return x.StarIDs
    }
    return nil
}

func (x *TaskContext) GetVideoType() string {
    if x != nil {
        return x.VideoType
    }
    return ""
}

func (x *TaskContext) GetInterval() int32 {
    if x != nil {
        return x.Interval
    }
    return 0
}

func (x *TaskContext) GetFormatForce() bool {
    if x != nil {
        return x.FormatForce
    }
    return false
}

func (x *TaskContext) GetDecodeMode() string {
    if x != nil {
        return x.DecodeMode
    }
    return ""
}

func (x *TaskContext) GetDrawVideo() bool {
    if x != nil {
        return x.DrawVideo
    }
    return false
}

func (x *TaskContext) GetAtom() string {
    if x != nil {
        return x.Atom
    }
    return ""
}

type isTaskContext_VideoInfo interface {
    isTaskContext_VideoInfo()
}

type TaskContext_TencentVideoVid struct {
    TencentVideoVid string `protobuf:"bytes,10,opt,name=tencentVideoVid,proto3,oneof"` // 腾讯视频视频vid
}

type TaskContext_VideoUrl struct {
    VideoUrl string `protobuf:"bytes,11,opt,name=videoUrl,proto3,oneof"` // 视频url
}

func (*TaskContext_TencentVideoVid) isTaskContext_VideoInfo() {}

func (*TaskContext_VideoUrl) isTaskContext_VideoInfo() {}

// 流式服务
type TAlgorithm struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields
}

func (x *TAlgorithm) Reset() {
    *x = TAlgorithm{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[1]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *TAlgorithm) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*TAlgorithm) ProtoMessage() {}

func (x *TAlgorithm) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[1]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use TAlgorithm.ProtoReflect.Descriptor instead.
func (*TAlgorithm) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{1}
}

type TaskTypeEnum struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Types that are assignable to Tasktype:
    //	*TaskTypeEnum_TAlgorithm
    Tasktype isTaskTypeEnum_Tasktype `protobuf_oneof:"tasktype"`
}

func (x *TaskTypeEnum) Reset() {
    *x = TaskTypeEnum{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[2]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *TaskTypeEnum) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*TaskTypeEnum) ProtoMessage() {}

func (x *TaskTypeEnum) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[2]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use TaskTypeEnum.ProtoReflect.Descriptor instead.
func (*TaskTypeEnum) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{2}
}

func (m *TaskTypeEnum) GetTasktype() isTaskTypeEnum_Tasktype {
    if m != nil {
        return m.Tasktype
    }
    return nil
}

func (x *TaskTypeEnum) GetTAlgorithm() *TAlgorithm {
    if x, ok := x.GetTasktype().(*TaskTypeEnum_TAlgorithm); ok {
        return x.TAlgorithm
    }
    return nil
}

type isTaskTypeEnum_Tasktype interface {
    isTaskTypeEnum_Tasktype()
}

type TaskTypeEnum_TAlgorithm struct {
    TAlgorithm *TAlgorithm `protobuf:"bytes,1,opt,name=tAlgorithm,proto3,oneof"`
}

func (*TaskTypeEnum_TAlgorithm) isTaskTypeEnum_Tasktype() {}

type TaskTypeOption struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Opt []*TaskTypeEnum `protobuf:"bytes,1,rep,name=opt,proto3" json:"opt,omitempty"`
}

func (x *TaskTypeOption) Reset() {
    *x = TaskTypeOption{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[3]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *TaskTypeOption) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*TaskTypeOption) ProtoMessage() {}

func (x *TaskTypeOption) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[3]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use TaskTypeOption.ProtoReflect.Descriptor instead.
func (*TaskTypeOption) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{3}
}

func (x *TaskTypeOption) GetOpt() []*TaskTypeEnum {
    if x != nil {
        return x.Opt
    }
    return nil
}

type ProcessSlice struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    BeginPtsMs int32            `protobuf:"varint,1,opt,name=beginPtsMs,proto3" json:"beginPtsMs,omitempty"`
    EndPtsMs   int32            `protobuf:"varint,2,opt,name=endPtsMs,proto3" json:"endPtsMs,omitempty"`
    Clips      []*VideoClipInfo `protobuf:"bytes,3,rep,name=clips,proto3" json:"clips,omitempty"`
}

func (x *ProcessSlice) Reset() {
    *x = ProcessSlice{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[4]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *ProcessSlice) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSlice) ProtoMessage() {}

func (x *ProcessSlice) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[4]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use ProcessSlice.ProtoReflect.Descriptor instead.
func (*ProcessSlice) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{4}
}

func (x *ProcessSlice) GetBeginPtsMs() int32 {
    if x != nil {
        return x.BeginPtsMs
    }
    return 0
}

func (x *ProcessSlice) GetEndPtsMs() int32 {
    if x != nil {
        return x.EndPtsMs
    }
    return 0
}

func (x *ProcessSlice) GetClips() []*VideoClipInfo {
    if x != nil {
        return x.Clips
    }
    return nil
}

// consumer -> manager
type ConsumerTaskRequest struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // step1: consumer 向 manager 拉取任务
    TaskTypes *TaskTypeOption `protobuf:"bytes,1,opt,name=taskTypes,proto3" json:"taskTypes,omitempty"`
    // step3: 心跳 (可多次传输)
    Ping bool `protobuf:"varint,2,opt,name=ping,proto3" json:"ping,omitempty"`
    // step5: return result
    // common.ProcessResult result = 5;
    RetCode int32 `protobuf:"varint,5,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` //1: success, else: fail
    // step7:
    Done bool `protobuf:"varint,7,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *ConsumerTaskRequest) Reset() {
    *x = ConsumerTaskRequest{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[5]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *ConsumerTaskRequest) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerTaskRequest) ProtoMessage() {}

func (x *ConsumerTaskRequest) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[5]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use ConsumerTaskRequest.ProtoReflect.Descriptor instead.
func (*ConsumerTaskRequest) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{5}
}

func (x *ConsumerTaskRequest) GetTaskTypes() *TaskTypeOption {
    if x != nil {
        return x.TaskTypes
    }
    return nil
}

func (x *ConsumerTaskRequest) GetPing() bool {
    if x != nil {
        return x.Ping
    }
    return false
}

func (x *ConsumerTaskRequest) GetRetCode() int32 {
    if x != nil {
        return x.RetCode
    }
    return 0
}

func (x *ConsumerTaskRequest) GetDone() bool {
    if x != nil {
        return x.Done
    }
    return false
}

// consumer <- manager
type ConsumerTaskReply struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Context *TaskContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
    // step2: manager 返回需要处理的任务和视频片段
    TaskType *TaskTypeEnum `protobuf:"bytes,3,opt,name=taskType,proto3" json:"taskType,omitempty"`
    BaseUrl  string        `protobuf:"bytes,4,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"` // 上传cos的url
    Slice    *ProcessSlice `protobuf:"bytes,5,opt,name=slice,proto3" json:"slice,omitempty"`
    // step4: 心跳 (可多次传输)
    // step6: 心跳 (可多次传输)
    Pong bool `protobuf:"varint,6,opt,name=pong,proto3" json:"pong,omitempty"`
    // step8:
    Fine bool `protobuf:"varint,7,opt,name=fine,proto3" json:"fine,omitempty"`
}

func (x *ConsumerTaskReply) Reset() {
    *x = ConsumerTaskReply{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[6]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *ConsumerTaskReply) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerTaskReply) ProtoMessage() {}

func (x *ConsumerTaskReply) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[6]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use ConsumerTaskReply.ProtoReflect.Descriptor instead.
func (*ConsumerTaskReply) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{6}
}

func (x *ConsumerTaskReply) GetContext() *TaskContext {
    if x != nil {
        return x.Context
    }
    return nil
}

func (x *ConsumerTaskReply) GetTaskType() *TaskTypeEnum {
    if x != nil {
        return x.TaskType
    }
    return nil
}

func (x *ConsumerTaskReply) GetBaseUrl() string {
    if x != nil {
        return x.BaseUrl
    }
    return ""
}

func (x *ConsumerTaskReply) GetSlice() *ProcessSlice {
    if x != nil {
        return x.Slice
    }
    return nil
}

func (x *ConsumerTaskReply) GetPong() bool {
    if x != nil {
        return x.Pong
    }
    return false
}

func (x *ConsumerTaskReply) GetFine() bool {
    if x != nil {
        return x.Fine
    }
    return false
}

// 不同算法的阶段任务
type TAlgorithmTask struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    EtcdIndex     int64          `protobuf:"varint,1,opt,name=etcdIndex,proto3" json:"etcdIndex,omitempty"`        // 任务序号
    EtcdNamespace string         `protobuf:"bytes,2,opt,name=etcdNamespace,proto3" json:"etcdNamespace,omitempty"` // 命名空间
    Context       *TaskContext   `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`             // 任务完整的上下文信息
    Slice         *TimeSlice     `protobuf:"bytes,4,opt,name=slice,proto3" json:"slice,omitempty"`                 // 当前分片的时间区间
    RetryTime     int32          `protobuf:"varint,5,opt,name=retryTime,proto3" json:"retryTime,omitempty"`        // 当前重试次数
    VideoClips    *VideoClipInfo `protobuf:"bytes,6,opt,name=videoClips,proto3" json:"videoClips,omitempty"`       // 当前分片的信息
}

func (x *TAlgorithmTask) Reset() {
    *x = TAlgorithmTask{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[7]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *TAlgorithmTask) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*TAlgorithmTask) ProtoMessage() {}

func (x *TAlgorithmTask) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[7]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use TAlgorithmTask.ProtoReflect.Descriptor instead.
func (*TAlgorithmTask) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{7}
}

func (x *TAlgorithmTask) GetEtcdIndex() int64 {
    if x != nil {
        return x.EtcdIndex
    }
    return 0
}

func (x *TAlgorithmTask) GetEtcdNamespace() string {
    if x != nil {
        return x.EtcdNamespace
    }
    return ""
}

func (x *TAlgorithmTask) GetContext() *TaskContext {
    if x != nil {
        return x.Context
    }
    return nil
}

func (x *TAlgorithmTask) GetSlice() *TimeSlice {
    if x != nil {
        return x.Slice
    }
    return nil
}

func (x *TAlgorithmTask) GetRetryTime() int32 {
    if x != nil {
        return x.RetryTime
    }
    return 0
}

func (x *TAlgorithmTask) GetVideoClips() *VideoClipInfo {
    if x != nil {
        return x.VideoClips
    }
    return nil
}

// 综合结果
type ProcessResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    BeginPtsMs int32 `protobuf:"varint,1,opt,name=beginPtsMs,proto3" json:"beginPtsMs,omitempty"`
    EndPtsMs   int32 `protobuf:"varint,2,opt,name=endPtsMs,proto3" json:"endPtsMs,omitempty"`
    // Types that are assignable to Result:
    //	*ProcessResult_SceneResult
    //	*ProcessResult_SegResult
    Result isProcessResult_Result `protobuf_oneof:"result"`
}

func (x *ProcessResult) Reset() {
    *x = ProcessResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[8]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *ProcessResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*ProcessResult) ProtoMessage() {}

func (x *ProcessResult) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[8]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use ProcessResult.ProtoReflect.Descriptor instead.
func (*ProcessResult) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessResult) GetBeginPtsMs() int32 {
    if x != nil {
        return x.BeginPtsMs
    }
    return 0
}

func (x *ProcessResult) GetEndPtsMs() int32 {
    if x != nil {
        return x.EndPtsMs
    }
    return 0
}

func (m *ProcessResult) GetResult() isProcessResult_Result {
    if m != nil {
        return m.Result
    }
    return nil
}

func (x *ProcessResult) GetSceneResult() *SceneResult {
    if x, ok := x.GetResult().(*ProcessResult_SceneResult); ok {
        return x.SceneResult
    }
    return nil
}

func (x *ProcessResult) GetSegResult() *FrameAlgorithmResult {
    if x, ok := x.GetResult().(*ProcessResult_SegResult); ok {
        return x.SegResult
    }
    return nil
}

type isProcessResult_Result interface {
    isProcessResult_Result()
}

type ProcessResult_SceneResult struct {
    SceneResult *SceneResult `protobuf:"bytes,3,opt,name=sceneResult,proto3,oneof"` // 场景信息
}

type ProcessResult_SegResult struct {
    SegResult *FrameAlgorithmResult `protobuf:"bytes,4,opt,name=segResult,proto3,oneof"` // 分割结果
}

func (*ProcessResult_SceneResult) isProcessResult_Result() {}

func (*ProcessResult_SegResult) isProcessResult_Result() {}

// 分割结果
type SingleAlgorithmResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    SegID      string `protobuf:"bytes,1,opt,name=segID,proto3" json:"segID,omitempty"`            // innerFeedID_beginMs_endMs_frameStartIdx_frameEndIdx
    BeginPtsMs int32  `protobuf:"varint,2,opt,name=beginPtsMs,proto3" json:"beginPtsMs,omitempty"` // 对应的起始时间
    EndPtsMs   int32  `protobuf:"varint,3,opt,name=endPtsMs,proto3" json:"endPtsMs,omitempty"`     // 对应的结束时间
    SegData    string `protobuf:"bytes,4,opt,name=segData,proto3" json:"segData,omitempty"`        // 分割svg
}

func (x *SingleAlgorithmResult) Reset() {
    *x = SingleAlgorithmResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[9]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SingleAlgorithmResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SingleAlgorithmResult) ProtoMessage() {}

func (x *SingleAlgorithmResult) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[9]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SingleAlgorithmResult.ProtoReflect.Descriptor instead.
func (*SingleAlgorithmResult) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{9}
}

func (x *SingleAlgorithmResult) GetSegID() string {
    if x != nil {
        return x.SegID
    }
    return ""
}

func (x *SingleAlgorithmResult) GetBeginPtsMs() int32 {
    if x != nil {
        return x.BeginPtsMs
    }
    return 0
}

func (x *SingleAlgorithmResult) GetEndPtsMs() int32 {
    if x != nil {
        return x.EndPtsMs
    }
    return 0
}

func (x *SingleAlgorithmResult) GetSegData() string {
    if x != nil {
        return x.SegData
    }
    return ""
}

type FrameAlgorithmResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Results []*SingleAlgorithmResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FrameAlgorithmResult) Reset() {
    *x = FrameAlgorithmResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[10]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *FrameAlgorithmResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*FrameAlgorithmResult) ProtoMessage() {}

func (x *FrameAlgorithmResult) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[10]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use FrameAlgorithmResult.ProtoReflect.Descriptor instead.
func (*FrameAlgorithmResult) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{10}
}

func (x *FrameAlgorithmResult) GetResults() []*SingleAlgorithmResult {
    if x != nil {
        return x.Results
    }
    return nil
}

// 场景检测结果
type SceneResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    SceneGroupID    string  `protobuf:"bytes,1,opt,name=sceneGroupID,proto3" json:"sceneGroupID,omitempty"`
    BreakPointPtsMs []int32 `protobuf:"varint,2,rep,packed,name=breakPointPtsMs,proto3" json:"breakPointPtsMs,omitempty"`
}

func (x *SceneResult) Reset() {
    *x = SceneResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[11]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SceneResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SceneResult) ProtoMessage() {}

func (x *SceneResult) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[11]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SceneResult.ProtoReflect.Descriptor instead.
func (*SceneResult) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{11}
}

func (x *SceneResult) GetSceneGroupID() string {
    if x != nil {
        return x.SceneGroupID
    }
    return ""
}

func (x *SceneResult) GetBreakPointPtsMs() []int32 {
    if x != nil {
        return x.BreakPointPtsMs
    }
    return nil
}

type VideoClipInfo struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    SourceKey    string `protobuf:"bytes,1,opt,name=sourceKey,proto3" json:"sourceKey,omitempty"`
    VideoClipURL string `protobuf:"bytes,2,opt,name=videoClipURL,proto3" json:"videoClipURL,omitempty"`
    BeginPtsMs   int32  `protobuf:"varint,3,opt,name=beginPtsMs,proto3" json:"beginPtsMs,omitempty"` // 左闭右开区间
    EndPtsMs     int32  `protobuf:"varint,4,opt,name=endPtsMs,proto3" json:"endPtsMs,omitempty"`
    Width        int32  `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
    Height       int32  `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
    // 分片前保留帧的Pts 从大到小排列
    ReservePtsMs []int32 `protobuf:"varint,7,rep,packed,name=reservePtsMs,proto3" json:"reservePtsMs,omitempty"` // 该字段废弃
    // 本地地址, 由客户端设置
    LocalPath         string  `protobuf:"bytes,8,opt,name=localPath,proto3" json:"localPath,omitempty"`
    RelativePtsMs     []int32 `protobuf:"varint,9,rep,packed,name=relativePtsMs,proto3" json:"relativePtsMs,omitempty"` // [ 0,  ]
    ProcessBeginPtsMs int32   `protobuf:"varint,10,opt,name=processBeginPtsMs,proto3" json:"processBeginPtsMs,omitempty"`
    ProcessEndPtsMs   int32   `protobuf:"varint,11,opt,name=processEndPtsMs,proto3" json:"processEndPtsMs,omitempty"`
}

func (x *VideoClipInfo) Reset() {
    *x = VideoClipInfo{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[12]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *VideoClipInfo) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*VideoClipInfo) ProtoMessage() {}

func (x *VideoClipInfo) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[12]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use VideoClipInfo.ProtoReflect.Descriptor instead.
func (*VideoClipInfo) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{12}
}

func (x *VideoClipInfo) GetSourceKey() string {
    if x != nil {
        return x.SourceKey
    }
    return ""
}

func (x *VideoClipInfo) GetVideoClipURL() string {
    if x != nil {
        return x.VideoClipURL
    }
    return ""
}

func (x *VideoClipInfo) GetBeginPtsMs() int32 {
    if x != nil {
        return x.BeginPtsMs
    }
    return 0
}

func (x *VideoClipInfo) GetEndPtsMs() int32 {
    if x != nil {
        return x.EndPtsMs
    }
    return 0
}

func (x *VideoClipInfo) GetWidth() int32 {
    if x != nil {
        return x.Width
    }
    return 0
}

func (x *VideoClipInfo) GetHeight() int32 {
    if x != nil {
        return x.Height
    }
    return 0
}

func (x *VideoClipInfo) GetReservePtsMs() []int32 {
    if x != nil {
        return x.ReservePtsMs
    }
    return nil
}

func (x *VideoClipInfo) GetLocalPath() string {
    if x != nil {
        return x.LocalPath
    }
    return ""
}

func (x *VideoClipInfo) GetRelativePtsMs() []int32 {
    if x != nil {
        return x.RelativePtsMs
    }
    return nil
}

func (x *VideoClipInfo) GetProcessBeginPtsMs() int32 {
    if x != nil {
        return x.ProcessBeginPtsMs
    }
    return 0
}

func (x *VideoClipInfo) GetProcessEndPtsMs() int32 {
    if x != nil {
        return x.ProcessEndPtsMs
    }
    return 0
}

type TimeSlice struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    BeginPtsMs int32 `protobuf:"varint,1,opt,name=beginPtsMs,proto3" json:"beginPtsMs,omitempty"`
    EndPtsMs   int32 `protobuf:"varint,2,opt,name=endPtsMs,proto3" json:"endPtsMs,omitempty"`
}

func (x *TimeSlice) Reset() {
    *x = TimeSlice{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[13]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *TimeSlice) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*TimeSlice) ProtoMessage() {}

func (x *TimeSlice) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[13]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use TimeSlice.ProtoReflect.Descriptor instead.
func (*TimeSlice) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{13}
}

func (x *TimeSlice) GetBeginPtsMs() int32 {
    if x != nil {
        return x.BeginPtsMs
    }
    return 0
}

func (x *TimeSlice) GetEndPtsMs() int32 {
    if x != nil {
        return x.EndPtsMs
    }
    return 0
}

type TVideoSliceTask struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    TaskID    string       `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
    SourceKey string       `protobuf:"bytes,2,opt,name=sourceKey,proto3" json:"sourceKey,omitempty"`
    Context   *TaskContext `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
    Slice     *TimeSlice   `protobuf:"bytes,4,opt,name=slice,proto3" json:"slice,omitempty"`
    Index     int32        `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TVideoSliceTask) Reset() {
    *x = TVideoSliceTask{}
    if protoimpl.UnsafeEnabled {
        mi := &file_algorithm_task_proto_msgTypes[14]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *TVideoSliceTask) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*TVideoSliceTask) ProtoMessage() {}

func (x *TVideoSliceTask) ProtoReflect() protoreflect.Message {
    mi := &file_algorithm_task_proto_msgTypes[14]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use TVideoSliceTask.ProtoReflect.Descriptor instead.
func (*TVideoSliceTask) Descriptor() ([]byte, []int) {
    return file_algorithm_task_proto_rawDescGZIP(), []int{14}
}

func (x *TVideoSliceTask) GetTaskID() string {
    if x != nil {
        return x.TaskID
    }
    return ""
}

func (x *TVideoSliceTask) GetSourceKey() string {
    if x != nil {
        return x.SourceKey
    }
    return ""
}

func (x *TVideoSliceTask) GetContext() *TaskContext {
    if x != nil {
        return x.Context
    }
    return nil
}

func (x *TVideoSliceTask) GetSlice() *TimeSlice {
    if x != nil {
        return x.Slice
    }
    return nil
}

func (x *TVideoSliceTask) GetIndex() int32 {
    if x != nil {
        return x.Index
    }
    return 0
}

var File_algorithm_task_proto protoreflect.FileDescriptor

var file_algorithm_task_proto_rawDesc = []byte{
    0x0a, 0x14, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b,
    0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d,
    0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
    0x67, 0x65, 0x72, 0x22, 0x94, 0x06, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
    0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61,
    0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
    0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03,
    0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
    0x32, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
    0x53, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74,
    0x61, 0x73, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
    0x70, 0x4d, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x50,
    0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
    0x50, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
    0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01,
    0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a,
    0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
    0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76,
    0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x09,
    0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74,
    0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
    0x52, 0x0f, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69,
    0x64, 0x12, 0x1c, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20,
    0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12,
    0x2e, 0x0a, 0x12, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46,
    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x65, 0x6e,
    0x63, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
    0x36, 0x0a, 0x16, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44,
    0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
    0x16, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x73,
    0x70, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x6e, 0x63, 0x65,
    0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
    0x52, 0x0f, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x69,
    0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x49, 0x44,
    0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65,
    0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x49, 0x44, 0x73, 0x18, 0x10,
    0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x49, 0x44, 0x73, 0x12, 0x1d, 0x0a,
    0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
    0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
    0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
    0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d,
    0x61, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
    0x63, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
    0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72,
    0x61, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64,
    0x72, 0x61, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x6f, 0x6d,
    0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x74, 0x6f, 0x6d, 0x42, 0x0c, 0x0a, 0x0a,
    0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x0b, 0x0a, 0x09, 0x54, 0x48,
    0x75, 0x6d, 0x61, 0x6e, 0x53, 0x65, 0x67, 0x22, 0x62, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54,
    0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x48, 0x75, 0x6d, 0x61,
    0x6e, 0x53, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x70,
    0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b,
    0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x53,
    0x65, 0x67, 0x48, 0x00, 0x52, 0x09, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x53, 0x65, 0x67, 0x42,
    0x0a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x54,
    0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
    0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70,
    0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b,
    0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
    0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x50,
    0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
    0x65, 0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
    0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65,
    0x6e, 0x64, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65,
    0x6e, 0x64, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73,
    0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75,
    0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
    0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x6e,
    0x66, 0x6f, 0x52, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x43, 0x6f,
    0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61,
    0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
    0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
    0x6e, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
    0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67,
    0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
    0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
    0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22,
    0xa2, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
    0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75,
    0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
    0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
    0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x74, 0x61, 0x73,
    0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72,
    0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73,
    0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
    0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
    0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
    0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x05, 0x73,
    0x6c, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70,
    0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b,
    0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
    0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
    0x70, 0x6f, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
    0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
    0x66, 0x69, 0x6e, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x0d, 0x54, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x53,
    0x65, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x63, 0x64, 0x49, 0x6e,
    0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x74, 0x63, 0x64, 0x49,
    0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x74, 0x63, 0x64, 0x4e, 0x61, 0x6d, 0x65,
    0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x74, 0x63,
    0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f,
    0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72,
    0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73,
    0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
    0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c,
    0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
    0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74,
    0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65,
    0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
    0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
    0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x76, 0x69,
    0x64, 0x65, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
    0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e,
    0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x64,
    0x65, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65,
    0x6f, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65,
    0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69,
    0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65,
    0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x50,
    0x74, 0x73, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50,
    0x74, 0x73, 0x4d, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63,
    0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f,
    0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75,
    0x6c, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
    0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d,
    0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
    0x67, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x53, 0x65,
    0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x67, 0x52, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82,
    0x01, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x53, 0x65,
    0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x67, 0x49, 0x44,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x67, 0x49, 0x44, 0x12, 0x1e, 0x0a,
    0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x05, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x1a, 0x0a,
    0x08, 0x65, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
    0x08, 0x65, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67,
    0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x67, 0x44,
    0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x13, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x75, 0x6d, 0x61,
    0x6e, 0x53, 0x65, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72,
    0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73,
    0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
    0x48, 0x75, 0x6d, 0x61, 0x6e, 0x53, 0x65, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
    0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65,
    0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x47,
    0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63,
    0x65, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x72,
    0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x02, 0x20,
    0x03, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50,
    0x74, 0x73, 0x4d, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c,
    0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
    0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
    0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x69,
    0x70, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65,
    0x6f, 0x43, 0x6c, 0x69, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69,
    0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65,
    0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x50,
    0x74, 0x73, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50,
    0x74, 0x73, 0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
    0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
    0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
    0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x74, 0x73,
    0x4d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
    0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
    0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
    0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6c,
    0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
    0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18,
    0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x65,
    0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
    0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
    0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x50, 0x74, 0x73,
    0x4d, 0x73, 0x22, 0x47, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12,
    0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12,
    0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x05, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0f,
    0x54, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
    0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
    0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
    0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
    0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
    0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75,
    0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
    0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
    0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x6c, 0x69,
    0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
    0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d,
    0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65,
    0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
    0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x86, 0x01,
    0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x76,
    0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
    0x12, 0x30, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65,
    0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
    0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f,
    0x73, 0x65, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
    0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70,
    0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x2e, 0x63, 0x6f,
    0x64, 0x65, 0x2e, 0x6f, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67,
    0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x75,
    0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x33,
}

var (
    file_algorithm_task_proto_rawDescOnce sync.Once
    file_algorithm_task_proto_rawDescData = file_algorithm_task_proto_rawDesc
)

func file_algorithm_task_proto_rawDescGZIP() []byte {
    file_algorithm_task_proto_rawDescOnce.Do(func() {
        file_algorithm_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_algorithm_task_proto_rawDescData)
    })
    return file_algorithm_task_proto_rawDescData
}

var file_algorithm_task_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_algorithm_task_proto_goTypes = []interface{}{
    (*TaskContext)(nil),          // 0: trpc.algorithm.task_manager.TaskContext
    (*TAlgorithm)(nil),            // 1: trpc.algorithm.task_manager.TAlgorithm
    (*TaskTypeEnum)(nil),         // 2: trpc.algorithm.task_manager.TaskTypeEnum
    (*TaskTypeOption)(nil),       // 3: trpc.algorithm.task_manager.TaskTypeOption
    (*ProcessSlice)(nil),         // 4: trpc.algorithm.task_manager.ProcessSlice
    (*ConsumerTaskRequest)(nil),  // 5: trpc.algorithm.task_manager.ConsumerTaskRequest
    (*ConsumerTaskReply)(nil),    // 6: trpc.algorithm.task_manager.ConsumerTaskReply
    (*TAlgorithmTask)(nil),        // 7: trpc.algorithm.task_manager.TAlgorithmTask
    (*ProcessResult)(nil),        // 8: trpc.algorithm.task_manager.ProcessResult
    (*SingleAlgorithmResult)(nil), // 9: trpc.algorithm.task_manager.SingleAlgorithmResult
    (*FrameAlgorithmResult)(nil),  // 10: trpc.algorithm.task_manager.FrameAlgorithmResult
    (*SceneResult)(nil),          // 11: trpc.algorithm.task_manager.SceneResult
    (*VideoClipInfo)(nil),        // 12: trpc.algorithm.task_manager.VideoClipInfo
    (*TimeSlice)(nil),            // 13: trpc.algorithm.task_manager.TimeSlice
    (*TVideoSliceTask)(nil),      // 14: trpc.algorithm.task_manager.TVideoSliceTask
}
var file_algorithm_task_proto_depIdxs = []int32{
    1,  // 0: trpc.algorithm.task_manager.TaskTypeEnum.tAlgorithm:type_name -> trpc.algorithm.task_manager.TAlgorithm
    2,  // 1: trpc.algorithm.task_manager.TaskTypeOption.opt:type_name -> trpc.algorithm.task_manager.TaskTypeEnum
    12, // 2: trpc.algorithm.task_manager.ProcessSlice.clips:type_name -> trpc.algorithm.task_manager.VideoClipInfo
    3,  // 3: trpc.algorithm.task_manager.ConsumerTaskRequest.taskTypes:type_name -> trpc.algorithm.task_manager.TaskTypeOption
    0,  // 4: trpc.algorithm.task_manager.ConsumerTaskReply.context:type_name -> trpc.algorithm.task_manager.TaskContext
    2,  // 5: trpc.algorithm.task_manager.ConsumerTaskReply.taskType:type_name -> trpc.algorithm.task_manager.TaskTypeEnum
    4,  // 6: trpc.algorithm.task_manager.ConsumerTaskReply.slice:type_name -> trpc.algorithm.task_manager.ProcessSlice
    0,  // 7: trpc.algorithm.task_manager.TAlgorithmTask.context:type_name -> trpc.algorithm.task_manager.TaskContext
    13, // 8: trpc.algorithm.task_manager.TAlgorithmTask.slice:type_name -> trpc.algorithm.task_manager.TimeSlice
    12, // 9: trpc.algorithm.task_manager.TAlgorithmTask.videoClips:type_name -> trpc.algorithm.task_manager.VideoClipInfo
    11, // 10: trpc.algorithm.task_manager.ProcessResult.sceneResult:type_name -> trpc.algorithm.task_manager.SceneResult
    10, // 11: trpc.algorithm.task_manager.ProcessResult.segResult:type_name -> trpc.algorithm.task_manager.FrameAlgorithmResult
    9,  // 12: trpc.algorithm.task_manager.FrameAlgorithmResult.results:type_name -> trpc.algorithm.task_manager.SingleAlgorithmResult
    0,  // 13: trpc.algorithm.task_manager.TVideoSliceTask.context:type_name -> trpc.algorithm.task_manager.TaskContext
    13, // 14: trpc.algorithm.task_manager.TVideoSliceTask.slice:type_name -> trpc.algorithm.task_manager.TimeSlice
    5,  // 15: trpc.algorithm.task_manager.StreamServer.StreamConsumer:input_type -> trpc.algorithm.task_manager.ConsumerTaskRequest
    6,  // 16: trpc.algorithm.task_manager.StreamServer.StreamConsumer:output_type -> trpc.algorithm.task_manager.ConsumerTaskReply
    16, // [16:17] is the sub-list for method output_type
    15, // [15:16] is the sub-list for method input_type
    15, // [15:15] is the sub-list for extension type_name
    15, // [15:15] is the sub-list for extension extendee
    0,  // [0:15] is the sub-list for field type_name
}

func init() { file_algorithm_task_proto_init() }
func file_algorithm_task_proto_init() {
    if File_algorithm_task_proto != nil {
        return
    }
    if !protoimpl.UnsafeEnabled {
        file_algorithm_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*TaskContext); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*TAlgorithm); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*TaskTypeEnum); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*TaskTypeOption); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*ProcessSlice); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*ConsumerTaskRequest); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*ConsumerTaskReply); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*TAlgorithmTask); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*ProcessResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SingleAlgorithmResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*FrameAlgorithmResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SceneResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*VideoClipInfo); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*TimeSlice); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_algorithm_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*TVideoSliceTask); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
    }
    file_algorithm_task_proto_msgTypes[0].OneofWrappers = []interface{}{
        (*TaskContext_TencentVideoVid)(nil),
        (*TaskContext_VideoUrl)(nil),
    }
    file_algorithm_task_proto_msgTypes[2].OneofWrappers = []interface{}{
        (*TaskTypeEnum_TAlgorithm)(nil),
    }
    file_algorithm_task_proto_msgTypes[8].OneofWrappers = []interface{}{
        (*ProcessResult_SceneResult)(nil),
        (*ProcessResult_SegResult)(nil),
    }
    type x struct{}
    out := protoimpl.TypeBuilder{
        File: protoimpl.DescBuilder{
            GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
            RawDescriptor: file_algorithm_task_proto_rawDesc,
            NumEnums:      0,
            NumMessages:   15,
            NumExtensions: 0,
            NumServices:   1,
        },
        GoTypes:           file_algorithm_task_proto_goTypes,
        DependencyIndexes: file_algorithm_task_proto_depIdxs,
        MessageInfos:      file_algorithm_task_proto_msgTypes,
    }.Build()
    File_algorithm_task_proto = out.File
    file_algorithm_task_proto_rawDesc = nil
    file_algorithm_task_proto_goTypes = nil
    file_algorithm_task_proto_depIdxs = nil
}



type VideoSliceDurationInfo struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Index         int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
    BeginMs       int32   `protobuf:"varint,2,opt,name=beginMs,proto3" json:"beginMs,omitempty"`
    EndMs         int32   `protobuf:"varint,3,opt,name=endMs,proto3" json:"endMs,omitempty"`
    ReservePtsMs  []int32 `protobuf:"varint,4,rep,packed,name=reservePtsMs,proto3" json:"reservePtsMs,omitempty"` // 该字段废弃
    RelativePtsMs []int32 `protobuf:"varint,5,rep,packed,name=relativePtsMs,proto3" json:"relativePtsMs,omitempty"`
}

func (x *VideoSliceDurationInfo) Reset() {
    *x = VideoSliceDurationInfo{}
    if protoimpl.UnsafeEnabled {
        mi := &file_video_slice_proto_msgTypes[0]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *VideoSliceDurationInfo) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*VideoSliceDurationInfo) ProtoMessage() {}

func (x *VideoSliceDurationInfo) ProtoReflect() protoreflect.Message {
    mi := &file_video_slice_proto_msgTypes[0]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use VideoSliceDurationInfo.ProtoReflect.Descriptor instead.
func (*VideoSliceDurationInfo) Descriptor() ([]byte, []int) {
    return file_video_slice_proto_rawDescGZIP(), []int{0}
}

func (x *VideoSliceDurationInfo) GetIndex() int32 {
    if x != nil {
        return x.Index
    }
    return 0
}

func (x *VideoSliceDurationInfo) GetBeginMs() int32 {
    if x != nil {
        return x.BeginMs
    }
    return 0
}

func (x *VideoSliceDurationInfo) GetEndMs() int32 {
    if x != nil {
        return x.EndMs
    }
    return 0
}

func (x *VideoSliceDurationInfo) GetReservePtsMs() []int32 {
    if x != nil {
        return x.ReservePtsMs
    }
    return nil
}

func (x *VideoSliceDurationInfo) GetRelativePtsMs() []int32 {
    if x != nil {
        return x.RelativePtsMs
    }
    return nil
}

type VideoSliceFrameInfo struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
    Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *VideoSliceFrameInfo) Reset() {
    *x = VideoSliceFrameInfo{}
    if protoimpl.UnsafeEnabled {
        mi := &file_video_slice_proto_msgTypes[1]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *VideoSliceFrameInfo) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*VideoSliceFrameInfo) ProtoMessage() {}

func (x *VideoSliceFrameInfo) ProtoReflect() protoreflect.Message {
    mi := &file_video_slice_proto_msgTypes[1]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use VideoSliceFrameInfo.ProtoReflect.Descriptor instead.
func (*VideoSliceFrameInfo) Descriptor() ([]byte, []int) {
    return file_video_slice_proto_rawDescGZIP(), []int{1}
}

func (x *VideoSliceFrameInfo) GetWidth() int32 {
    if x != nil {
        return x.Width
    }
    return 0
}

func (x *VideoSliceFrameInfo) GetHeight() int32 {
    if x != nil {
        return x.Height
    }
    return 0
}

type VideoSliceInfo struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Vid      string                  `protobuf:"bytes,1,opt,name=vid,proto3" json:"vid,omitempty"`
    Url      string                  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
    Duration *VideoSliceDurationInfo `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
    Frame    *VideoSliceFrameInfo    `protobuf:"bytes,4,opt,name=frame,proto3" json:"frame,omitempty"`
}

func (x *VideoSliceInfo) Reset() {
    *x = VideoSliceInfo{}
    if protoimpl.UnsafeEnabled {
        mi := &file_video_slice_proto_msgTypes[2]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *VideoSliceInfo) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*VideoSliceInfo) ProtoMessage() {}

func (x *VideoSliceInfo) ProtoReflect() protoreflect.Message {
    mi := &file_video_slice_proto_msgTypes[2]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use VideoSliceInfo.ProtoReflect.Descriptor instead.
func (*VideoSliceInfo) Descriptor() ([]byte, []int) {
    return file_video_slice_proto_rawDescGZIP(), []int{2}
}

func (x *VideoSliceInfo) GetVid() string {
    if x != nil {
        return x.Vid
    }
    return ""
}

func (x *VideoSliceInfo) GetUrl() string {
    if x != nil {
        return x.Url
    }
    return ""
}

func (x *VideoSliceInfo) GetDuration() *VideoSliceDurationInfo {
    if x != nil {
        return x.Duration
    }
    return nil
}

func (x *VideoSliceInfo) GetFrame() *VideoSliceFrameInfo {
    if x != nil {
        return x.Frame
    }
    return nil
}

type SyncProcessRequest struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Appid       string `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
    FeedId      string `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
    ServiceType int32  `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
    // Types that are assignable to VideoInfo:
    //	*SyncProcessRequest_Vid
    //	*SyncProcessRequest_VideoUrl
    VideoInfo      isSyncProcessRequest_VideoInfo `protobuf_oneof:"video_info"`
    CosUrl         string                         `protobuf:"bytes,5,opt,name=cosUrl,proto3" json:"cosUrl,omitempty"`
    CosSecretId    string                         `protobuf:"bytes,6,opt,name=cosSecretId,proto3" json:"cosSecretId,omitempty"`
    CosSecretKey   string                         `protobuf:"bytes,7,opt,name=cosSecretKey,proto3" json:"cosSecretKey,omitempty"`
    FileNamePrefix string                         `protobuf:"bytes,8,opt,name=fileNamePrefix,proto3" json:"fileNamePrefix,omitempty"`
    Durations      []*VideoSliceDurationInfo      `protobuf:"bytes,9,rep,name=durations,proto3" json:"durations,omitempty"`
    Formats        []int32                        `protobuf:"varint,10,rep,packed,name=formats,proto3" json:"formats,omitempty"`
}

func (x *SyncProcessRequest) Reset() {
    *x = SyncProcessRequest{}
    if protoimpl.UnsafeEnabled {
        mi := &file_video_slice_proto_msgTypes[3]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SyncProcessRequest) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SyncProcessRequest) ProtoMessage() {}

func (x *SyncProcessRequest) ProtoReflect() protoreflect.Message {
    mi := &file_video_slice_proto_msgTypes[3]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SyncProcessRequest.ProtoReflect.Descriptor instead.
func (*SyncProcessRequest) Descriptor() ([]byte, []int) {
    return file_video_slice_proto_rawDescGZIP(), []int{3}
}

func (x *SyncProcessRequest) GetAppid() string {
    if x != nil {
        return x.Appid
    }
    return ""
}

func (x *SyncProcessRequest) GetFeedId() string {
    if x != nil {
        return x.FeedId
    }
    return ""
}

func (x *SyncProcessRequest) GetServiceType() int32 {
    if x != nil {
        return x.ServiceType
    }
    return 0
}

func (m *SyncProcessRequest) GetVideoInfo() isSyncProcessRequest_VideoInfo {
    if m != nil {
        return m.VideoInfo
    }
    return nil
}

func (x *SyncProcessRequest) GetVid() string {
    if x, ok := x.GetVideoInfo().(*SyncProcessRequest_Vid); ok {
        return x.Vid
    }
    return ""
}

func (x *SyncProcessRequest) GetVideoUrl() string {
    if x, ok := x.GetVideoInfo().(*SyncProcessRequest_VideoUrl); ok {
        return x.VideoUrl
    }
    return ""
}

func (x *SyncProcessRequest) GetCosUrl() string {
    if x != nil {
        return x.CosUrl
    }
    return ""
}

func (x *SyncProcessRequest) GetCosSecretId() string {
    if x != nil {
        return x.CosSecretId
    }
    return ""
}

func (x *SyncProcessRequest) GetCosSecretKey() string {
    if x != nil {
        return x.CosSecretKey
    }
    return ""
}

func (x *SyncProcessRequest) GetFileNamePrefix() string {
    if x != nil {
        return x.FileNamePrefix
    }
    return ""
}

func (x *SyncProcessRequest) GetDurations() []*VideoSliceDurationInfo {
    if x != nil {
        return x.Durations
    }
    return nil
}

func (x *SyncProcessRequest) GetFormats() []int32 {
    if x != nil {
        return x.Formats
    }
    return nil
}

type isSyncProcessRequest_VideoInfo interface {
    isSyncProcessRequest_VideoInfo()
}

type SyncProcessRequest_Vid struct {
    Vid string `protobuf:"bytes,4,opt,name=vid,proto3,oneof"`
}

type SyncProcessRequest_VideoUrl struct {
    VideoUrl string `protobuf:"bytes,11,opt,name=video_url,json=videoUrl,proto3,oneof"`
}

func (*SyncProcessRequest_Vid) isSyncProcessRequest_VideoInfo() {}

func (*SyncProcessRequest_VideoUrl) isSyncProcessRequest_VideoInfo() {}

// {"detect":1,"ret":0,"vid":""}
type Data struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Infos                 []*VideoSliceInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
    SourceVideoDurationMs int32             `protobuf:"varint,2,opt,name=sourceVideoDurationMs,proto3" json:"sourceVideoDurationMs,omitempty"`
    SelectFormat          int32             `protobuf:"varint,3,opt,name=selectFormat,proto3" json:"selectFormat,omitempty"`
}

func (x *Data) Reset() {
    *x = Data{}
    if protoimpl.UnsafeEnabled {
        mi := &file_video_slice_proto_msgTypes[4]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *Data) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
    mi := &file_video_slice_proto_msgTypes[4]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
    return file_video_slice_proto_rawDescGZIP(), []int{4}
}

func (x *Data) GetInfos() []*VideoSliceInfo {
    if x != nil {
        return x.Infos
    }
    return nil
}

func (x *Data) GetSourceVideoDurationMs() int32 {
    if x != nil {
        return x.SourceVideoDurationMs
    }
    return 0
}

func (x *Data) GetSelectFormat() int32 {
    if x != nil {
        return x.SelectFormat
    }
    return 0
}

type SyncProcessResponse struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Ret    int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
    Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
    FeedId string `protobuf:"bytes,3,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
    Data   *Data  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SyncProcessResponse) Reset() {
    *x = SyncProcessResponse{}
    if protoimpl.UnsafeEnabled {
        mi := &file_video_slice_proto_msgTypes[5]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SyncProcessResponse) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SyncProcessResponse) ProtoMessage() {}

func (x *SyncProcessResponse) ProtoReflect() protoreflect.Message {
    mi := &file_video_slice_proto_msgTypes[5]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SyncProcessResponse.ProtoReflect.Descriptor instead.
func (*SyncProcessResponse) Descriptor() ([]byte, []int) {
    return file_video_slice_proto_rawDescGZIP(), []int{5}
}

func (x *SyncProcessResponse) GetRet() int32 {
    if x != nil {
        return x.Ret
    }
    return 0
}

func (x *SyncProcessResponse) GetMsg() string {
    if x != nil {
        return x.Msg
    }
    return ""
}

func (x *SyncProcessResponse) GetFeedId() string {
    if x != nil {
        return x.FeedId
    }
    return ""
}

func (x *SyncProcessResponse) GetData() *Data {
    if x != nil {
        return x.Data
    }
    return nil
}

var File_video_slice_proto protoreflect.FileDescriptor

var file_video_slice_proto_rawDesc = []byte{
    0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x12, 0x38, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
    0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x74,
    0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x77, 0x69, 0x74,
    0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x1a, 0x1a, 0x74,
    0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
    0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x56, 0x69,
    0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65,
    0x67, 0x69, 0x6e, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x65, 0x67,
    0x69, 0x6e, 0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x18, 0x03, 0x20,
    0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
    0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
    0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x24,
    0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x74, 0x73, 0x4d, 0x73, 0x18,
    0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50,
    0x74, 0x73, 0x4d, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69,
    0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x77,
    0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
    0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x0e, 0x56, 0x69,
    0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
    0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x10,
    0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
    0x12, 0x6c, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x50, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
    0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x74,
    0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x77, 0x69, 0x74,
    0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x69,
    0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63,
    0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
    0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65,
    0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x69,
    0x64, 0x65, 0x6f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x72,
    0x65, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6c,
    0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x72,
    0x61, 0x6d, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63,
    0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
    0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
    0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
    0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
    0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03,
    0x76, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x76, 0x69, 0x64,
    0x12, 0x1d, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20,
    0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12,
    0x16, 0x0a, 0x06, 0x63, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
    0x06, 0x63, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x53, 0x65,
    0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
    0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x73,
    0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
    0x0c, 0x63, 0x6f, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a,
    0x0e, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
    0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50,
    0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x6e, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
    0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e,
    0x64, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x6c,
    0x69, 0x63, 0x65, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77,
    0x69, 0x6e, 0x67, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x75,
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
    0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x42,
    0x0c, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc0, 0x01,
    0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
    0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e,
    0x74, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
    0x67, 0x61, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x6c, 0x69, 0x63, 0x65,
    0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67,
    0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
    0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
    0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x64,
    0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0c,
    0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
    0x22, 0xa6, 0x01, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
    0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
    0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07,
    0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
    0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
    0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x61,
    0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x77, 0x69,
    0x74, 0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x2e, 0x44,
    0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xb9, 0x01, 0x0a, 0x0a, 0x56, 0x69,
    0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e,
    0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
    0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e,
    0x64, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x6c,
    0x69, 0x63, 0x65, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77,
    0x69, 0x6e, 0x67, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69,
    0x6e, 0x67, 0x61, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x6c, 0x69, 0x63,
    0x65, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e,
    0x67, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb9, 0x01, 0x0a, 0x57, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65,
    0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
    0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73,
    0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
    0x6f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64,
    0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6c, 0x69, 0x63,
    0x65, 0x50, 0x01, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x61,
    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
    0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74,
    0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x6f, 0x6d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f,
    0x73, 0x6c, 0x69, 0x63, 0x65, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x72,
    0x61, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6c, 0x69, 0x63,
    0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
    file_video_slice_proto_rawDescOnce sync.Once
    file_video_slice_proto_rawDescData = file_video_slice_proto_rawDesc
)

func file_video_slice_proto_rawDescGZIP() []byte {
    file_video_slice_proto_rawDescOnce.Do(func() {
        file_video_slice_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_slice_proto_rawDescData)
    })
    return file_video_slice_proto_rawDescData
}

var file_video_slice_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_video_slice_proto_goTypes = []interface{}{
    (*VideoSliceDurationInfo)(nil), // 0: trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceDurationInfo
    (*VideoSliceFrameInfo)(nil),    // 1: trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceFrameInfo
    (*VideoSliceInfo)(nil),         // 2: trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceInfo
    (*SyncProcessRequest)(nil),     // 3: trpc.contentunderstandingatom.videoslicewithoutredrawing.SyncProcessRequest
    (*Data)(nil),                   // 4: trpc.contentunderstandingatom.videoslicewithoutredrawing.Data
    (*SyncProcessResponse)(nil),    // 5: trpc.contentunderstandingatom.videoslicewithoutredrawing.SyncProcessResponse
}
var file_video_slice_proto_depIdxs = []int32{
    0, // 0: trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceInfo.duration:type_name -> trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceDurationInfo
    1, // 1: trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceInfo.frame:type_name -> trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceFrameInfo
    0, // 2: trpc.contentunderstandingatom.videoslicewithoutredrawing.SyncProcessRequest.durations:type_name -> trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceDurationInfo
    2, // 3: trpc.contentunderstandingatom.videoslicewithoutredrawing.Data.infos:type_name -> trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSliceInfo
    4, // 4: trpc.contentunderstandingatom.videoslicewithoutredrawing.SyncProcessResponse.data:type_name -> trpc.contentunderstandingatom.videoslicewithoutredrawing.Data
    3, // 5: trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSlice.SyncProcess:input_type -> trpc.contentunderstandingatom.videoslicewithoutredrawing.SyncProcessRequest
    5, // 6: trpc.contentunderstandingatom.videoslicewithoutredrawing.VideoSlice.SyncProcess:output_type -> trpc.contentunderstandingatom.videoslicewithoutredrawing.SyncProcessResponse
    6, // [6:7] is the sub-list for method output_type
    5, // [5:6] is the sub-list for method input_type
    5, // [5:5] is the sub-list for extension type_name
    5, // [5:5] is the sub-list for extension extendee
    0, // [0:5] is the sub-list for field type_name
}

func init() { file_video_slice_proto_init() }
func file_video_slice_proto_init() {
    if File_video_slice_proto != nil {
        return
    }
    if !protoimpl.UnsafeEnabled {
        file_video_slice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*VideoSliceDurationInfo); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_video_slice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*VideoSliceFrameInfo); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_video_slice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*VideoSliceInfo); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_video_slice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SyncProcessRequest); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_video_slice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*Data); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_video_slice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SyncProcessResponse); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
    }
    file_video_slice_proto_msgTypes[3].OneofWrappers = []interface{}{
        (*SyncProcessRequest_Vid)(nil),
        (*SyncProcessRequest_VideoUrl)(nil),
    }
    type x struct{}
    out := protoimpl.TypeBuilder{
        File: protoimpl.DescBuilder{
            GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
            RawDescriptor: file_video_slice_proto_rawDesc,
            NumEnums:      0,
            NumMessages:   6,
            NumExtensions: 0,
            NumServices:   1,
        },
        GoTypes:           file_video_slice_proto_goTypes,
        DependencyIndexes: file_video_slice_proto_depIdxs,
        MessageInfos:      file_video_slice_proto_msgTypes,
    }.Build()
    File_video_slice_proto = out.File
    file_video_slice_proto_rawDesc = nil
    file_video_slice_proto_goTypes = nil
    file_video_slice_proto_depIdxs = nil
}
